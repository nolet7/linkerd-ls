apiVersion: batch/v1
kind: Job
metadata:
  name: linkerd-vault-issuer-sync
  namespace: linkerd
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "1"
  labels:
    app: vault-issuer-presync
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        app: vault-issuer-presync
    spec:
      automountServiceAccountToken: true
      serviceAccountName: linkerd-cert-sync
      restartPolicy: Never
      volumes:
        - name: work
          emptyDir: {}
      initContainers:
        - name: vault-fetch
          image: curlimages/curl:8.10.1
          env:
            - name: VAULT_ADDR
              value: "http://48.217.51.59:8200"
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail

              echo "==> (health) ${VAULT_ADDR}/v1/sys/health"
              curl -sS --connect-timeout 5 "${VAULT_ADDR}/v1/sys/health" >/dev/null

              echo "==> Login to Vault via Kubernetes auth role linkerd-cert-sync"
              SA_TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
              LOGIN_JSON="$(curl -sS -X POST -H 'Content-Type: application/json' \
                -d "{\"role\":\"linkerd-cert-sync\",\"jwt\":\"${SA_TOKEN}\"}" \
                "${VAULT_ADDR}/v1/auth/kubernetes/login")" || true
              echo "${LOGIN_JSON}" > /work/login.json
              VAULT_TOKEN="$(sed -n 's/.*"client_token":"\([^"]*\)".*/\1/p' /work/login.json || true)"

              if [ -z "${VAULT_TOKEN:-}" ]; then
                echo "ERROR: did not extract client_token from login response"
                cat /work/login.json
                exit 1
              fi

              echo "==> Issue Linkerd issuer from pki_int/issue/linkerd-issuer"
              ISSUE_JSON="$(curl -sS \
                -H "X-Vault-Token: ${VAULT_TOKEN}" \
                -X POST \
                -d '{"common_name":"identity.linkerd.cluster.local","ttl":"720h"}' \
                "${VAULT_ADDR}/v1/pki_int/issue/linkerd-issuer")" || true
              echo "${ISSUE_JSON}" > /work/issue.json

              CERT="$(sed -n 's/.*"certificate":"\([^"]*\)".*/\1/p' /work/issue.json | sed 's/\\n/\n/g')"
              KEY="$(sed -n 's/.*"private_key":"\([^"]*\)".*/\1/p' /work/issue.json | sed 's/\\n/\n/g')"
              if [ -z "${CERT:-}" ] || [ -z "${KEY:-}" ]; then
                echo "ERROR: empty issuer certificate or key"
                cat /work/issue.json
                exit 1
              fi

              printf '%s' "${CERT}" > /work/issuer.crt
              printf '%s' "${KEY}"  > /work/issuer.key

              echo "==> Fetch Root CA (public)"
              curl -sS "${VAULT_ADDR}/v1/pki_root/ca/pem" > /work/trust-anchor.crt

              echo "==> Render K8s manifests to /work"
              cat > /work/linkerd-issuer-secret.yaml <<'EOF'
              apiVersion: v1
              kind: Secret
              metadata:
                name: linkerd-identity-issuer
                namespace: linkerd
              type: kubernetes.io/tls
              data:
                tls.crt: PLACEHOLDER_CRT
                tls.key: PLACEHOLDER_KEY
              EOF

              cat > /work/linkerd-trust-anchor-cm.yaml <<'EOF'
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: linkerd-identity-trust-roots
                namespace: linkerd
              data:
                ca-bundle.crt: |
              EOF

              CRT_B64="$(base64 -w0 < /work/issuer.crt)"
              KEY_B64="$(base64 -w0 < /work/issuer.key)"
              sed -i "s|PLACEHOLDER_CRT|${CRT_B64}|g" /work/linkerd-issuer-secret.yaml
              sed -i "s|PLACEHOLDER_KEY|${KEY_B64}|g" /work/linkerd-issuer-secret.yaml

              # indent trust anchor under the literal block
              sed -i 's/^/      /' /work/trust-anchor.crt
              cat /work/trust-anchor.crt >> /work/linkerd-trust-anchor-cm.yaml
          volumeMounts:
            - name: work
              mountPath: /work
      containers:
        - name: applier
          image: registry.k8s.io/kubectl:v1.33.4
          command: ["kubectl"]
          args:
            - apply
            - -f
            - /work/linkerd-issuer-secret.yaml
            - -f
            - /work/linkerd-trust-anchor-cm.yaml
          volumeMounts:
            - name: work
              mountPath: /work

